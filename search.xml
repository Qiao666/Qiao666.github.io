<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>js高级-面试题-闭包</title>
      <link href="/2020/06/12/js%E9%AB%98%E7%BA%A7-%E9%9D%A2%E8%AF%95%E9%A2%98-%E9%97%AD%E5%8C%85/"/>
      <url>/2020/06/12/js%E9%AB%98%E7%BA%A7-%E9%9D%A2%E8%AF%95%E9%A2%98-%E9%97%AD%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h1 id="闭包面试"><a href="#闭包面试" class="headerlink" title="闭包面试"></a>闭包面试</h1><h2 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h2><blockquote><p>输出是什么</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"The Window"</span>;</span><br><span class="line">  <span class="keyword">var</span> object = &#123;</span><br><span class="line">    name : <span class="string">"My Object"</span>,</span><br><span class="line">    getNameFunc : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  alert(object.getNameFunc()());  <span class="comment">//?  the window</span></span><br></pre></td></tr></table></figure><p>片段一是作用域的问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码片段二</span></span><br><span class="line"><span class="keyword">var</span> name2 = <span class="string">"The Window"</span>;</span><br><span class="line"><span class="keyword">var</span> object2 = &#123;</span><br><span class="line">  name2 : <span class="string">"My Object"</span>,</span><br><span class="line">  getNameFunc : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> that.name2;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">alert(object2.getNameFunc()()); <span class="comment">//?  my object</span></span><br></pre></td></tr></table></figure><p>片段二，由于返回函数使用了外层函数的变量that，<br>在其内部产生了闭包，闭包内that属性指向了object2<br>故输出为object2内部的name2属性</p><h2 id="面试题2"><a href="#面试题2" class="headerlink" title="面试题2"></a>面试题2</h2><p>代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">n,o</span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(o)</span><br><span class="line">   <span class="keyword">return</span> &#123;</span><br><span class="line">     fun:<span class="function"><span class="keyword">function</span>(<span class="params">m</span>)</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> fun(m,n)</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">var</span> a = fun(<span class="number">0</span>)</span><br><span class="line"> a.fun(<span class="number">1</span>)</span><br><span class="line"> a.fun(<span class="number">2</span>)</span><br><span class="line"> a.fun(<span class="number">3</span>)<span class="comment">//undefined,0,0,0</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> b = fun(<span class="number">0</span>).fun(<span class="number">1</span>).fun(<span class="number">2</span>).fun(<span class="number">3</span>)<span class="comment">//undefined,0,1,2</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> c = fun(<span class="number">0</span>).fun(<span class="number">1</span>)<span class="comment">//undefine 0</span></span><br><span class="line"> c.fun(<span class="number">2</span>)<span class="comment">//1</span></span><br><span class="line"> c.fun(<span class="number">3</span>)<span class="comment">//1</span></span><br></pre></td></tr></table></figure><p>总结来说，每一次调用fun函数，都会更新返回函数的闭包内的属性n</p>]]></content>
      
      
      <categories>
          
          <category> js高级 </category>
          
          <category> 面试题 </category>
          
          <category> 闭包 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js高级 </tag>
            
            <tag> 闭包 </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js高级-函数-闭包</title>
      <link href="/2020/06/12/js%E9%AB%98%E7%BA%A7-%E5%87%BD%E6%95%B0-%E9%97%AD%E5%8C%85/"/>
      <url>/2020/06/12/js%E9%AB%98%E7%BA%A7-%E5%87%BD%E6%95%B0-%E9%97%AD%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h1 id="理解闭包"><a href="#理解闭包" class="headerlink" title="理解闭包"></a>理解闭包</h1><h2 id="如何产生闭包"><a href="#如何产生闭包" class="headerlink" title="如何产生闭包"></a>如何产生闭包</h2><ul><li>函数嵌套</li><li>内部函数引用了外部函数的数据(变量/函数)<blockquote><p>二者缺一不可</p></blockquote></li></ul><h2 id="闭包到底是什么"><a href="#闭包到底是什么" class="headerlink" title="闭包到底是什么"></a>闭包到底是什么</h2><blockquote><p>使用chrome调试查看<br>注意: 闭包存在于嵌套的内部函数中</p></blockquote><p>理解一: 闭包是嵌套的内部函数(绝大部分人)</p><p>理解二: 包含被引用变量(函数)的对象(极少数人)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="string">'abc'</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span> (<span class="params"></span>) </span>&#123; <span class="comment">//执行函数定义就会产生闭包(不用调用内部函数)</span></span><br><span class="line">  <span class="built_in">console</span>.log(a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// fn2()</span></span><br><span class="line">&#125;</span><br><span class="line">fn1()</span><br></pre></td></tr></table></figure><p>就以上述代码而言，只有当fn1执行时，才会在fn2内部产生闭包，一个包含着引用对象（或者函数）的对象</p><h2 id="闭包作用"><a href="#闭包作用" class="headerlink" title="闭包作用"></a>闭包作用</h2><ul><li>使用函数内部的变量在函数执行完后, 仍然存活在内存中(延长了局部变量的生命周期)</li><li>让函数外部可以操作(读写)到函数内部的数据(变量/函数)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  a++</span><br><span class="line">  <span class="built_in">console</span>.log(a)</span><br><span class="line">  <span class="comment">// return a</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fn2</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = fn1()</span><br><span class="line">f() <span class="comment">// 3</span></span><br><span class="line">f() <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><p>问题:<br>函数执行完后, 函数内部声明的局部变量是否还存在?  </p><blockquote><p>一般是不存在, 存在于闭中的变量才可能存在</p></blockquote><p>在函数外部能直接访问函数内部的局部变量吗?</p><blockquote><p>不能, 但我们可以通过闭包让外部操作它</p></blockquote><h2 id="闭包的生命周期"><a href="#闭包的生命周期" class="headerlink" title="闭包的生命周期"></a>闭包的生命周期</h2><blockquote><p>产生: 在嵌套内部函数定义执行完时就产生了(不是在调用)<br>死亡: 在嵌套的内部函数成为垃圾对象时</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//此时闭包就已经产生了(函数提升, 内部函数对象已经创建了)</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn2</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      a++</span><br><span class="line">      <span class="built_in">console</span>.log(a)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fn2</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> f = fn1()</span><br><span class="line">  f() <span class="comment">// 3</span></span><br><span class="line">  f() <span class="comment">// 4</span></span><br><span class="line">  f = <span class="literal">null</span> <span class="comment">//闭包死亡(包含闭包的函数对象成为垃圾对象)</span></span><br></pre></td></tr></table></figure><h2 id="闭包应用"><a href="#闭包应用" class="headerlink" title="闭包应用"></a>闭包应用</h2><p>定义JS模块</p><ul><li>具有特定功能的js文件</li><li>将所有的数据和功能都封装在一个函数内部(私有的)</li><li>只向外暴露一个包信n个方法的对象或函数</li><li>模块的使用者, 只需要通过模块暴露的对象调用方法来实现对应的功能  </li></ul><p>js文件内容：</p><blockquote><p>一般情况</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myModule</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//私有数据</span></span><br><span class="line">  <span class="keyword">var</span> msg = <span class="string">'My atguigu'</span></span><br><span class="line">  <span class="comment">//操作数据的函数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'doSomething() '</span>+msg.toUpperCase())</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">doOtherthing</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'doOtherthing() '</span>+msg.toLowerCase())</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//向外暴露对象(给外部使用的方法)</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    doSomething: doSomething,</span><br><span class="line">    doOtherthing: doOtherthing</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用时，需要先生成一个函数对象，才能调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">module</span> = myModule()</span><br><span class="line"> <span class="built_in">module</span>.doSomething()</span><br><span class="line"> <span class="built_in">module</span>.doOtherthing()</span><br></pre></td></tr></table></figure><blockquote><p>匿名函数自调用</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//私有数据</span></span><br><span class="line">  <span class="keyword">var</span> msg = <span class="string">'My atguigu'</span></span><br><span class="line">  <span class="comment">//操作数据的函数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'doSomething() '</span>+msg.toUpperCase())</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">doOtherthing</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'doOtherthing() '</span>+msg.toLowerCase())</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//向外暴露对象(给外部使用的方法)</span></span><br><span class="line">  <span class="built_in">window</span>.myModule2 = &#123;</span><br><span class="line">    doSomething: doSomething,</span><br><span class="line">    doOtherthing: doOtherthing</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>该方式可以直接调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">myModule2.doSomething()</span><br><span class="line">myModule2.doOtherthing()</span><br></pre></td></tr></table></figure><p>后者容易压缩，工作时会常用</p><h2 id="缺点及解决方法"><a href="#缺点及解决方法" class="headerlink" title="缺点及解决方法"></a>缺点及解决方法</h2><p>缺点</p><ul><li>函数执行完后, 函数内的局部变量没有释放, 占用内存时间会变长</li><li>容易造成内存泄露<br>解决</li><li>能不用闭包就不用</li><li>及时释放</li></ul>]]></content>
      
      
      <categories>
          
          <category> js高级 </category>
          
          <category> 函数 </category>
          
          <category> 闭包 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闭包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js高级-面试题-作用域_作用域链</title>
      <link href="/2020/06/12/js%E9%AB%98%E7%BA%A7-%E9%9D%A2%E8%AF%95%E9%A2%98-%E4%BD%9C%E7%94%A8%E5%9F%9F-%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/"/>
      <url>/2020/06/12/js%E9%AB%98%E7%BA%A7-%E9%9D%A2%E8%AF%95%E9%A2%98-%E4%BD%9C%E7%94%A8%E5%9F%9F-%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="作用域面试题"><a href="#作用域面试题" class="headerlink" title="作用域面试题"></a>作用域面试题</h1><h2 id="第一题-输出什么"><a href="#第一题-输出什么" class="headerlink" title="第一题 输出什么"></a>第一题 输出什么</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">f</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">20</span>;</span><br><span class="line">f();</span><br><span class="line">&#125;</span><br><span class="line">show(fn);<span class="comment">//10</span></span><br></pre></td></tr></table></figure><p>js中的作用域是静态作用域，在代码执行前就已经划分好了<br>当执行show（fn）时，fn内部没有定义x，故fn向外层，对于上述函数，就是全局作用域中找，故输出为：10</p><h2 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h2><blockquote><p>输出什么</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(fn)</span><br><span class="line">&#125;</span><br><span class="line">fn()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">fn2: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(fn2)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.fn2()</span><br></pre></td></tr></table></figure><p>显然<br>fn（）会输出自身<br>而obj.fn（2） 则会报错，因为其输出的变量fn2在obj中，而全局作用域中也只有obj，没有fn2</p><blockquote><p>要想输出fn2，怎么办呢</p></blockquote><p>很简单，只需要把输出语句<br>     console.log(fn2)<br>改为<br>      console.log(this.fn2)<br>利用this指向引用对象本身，则该函数就会从引用对象中找匹配的变量</p>]]></content>
      
      
      <categories>
          
          <category> js高级 </category>
          
          <category> 面试题 </category>
          
          <category> 作用域 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 作用域 </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js高级-函数-作用域_作用域链</title>
      <link href="/2020/06/11/js%E9%AB%98%E7%BA%A7-%E5%87%BD%E6%95%B0-%E4%BD%9C%E7%94%A8%E5%9F%9F-%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/"/>
      <url>/2020/06/11/js%E9%AB%98%E7%BA%A7-%E5%87%BD%E6%95%B0-%E4%BD%9C%E7%94%A8%E5%9F%9F-%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h1><h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><ul><li>就是一块”地盘”, 一个代码段所在的区域</li><li>它是静态的(相对于上下文对象), 在编写代码时就确定<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2></li><li>全局作用域</li><li>函数作用域</li><li>块级作用域（ES6）<h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2></li><li>隔离变量，不同作用域下同名变量不会有冲突</li></ul><h1 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h1><h2 id="理解-1"><a href="#理解-1" class="headerlink" title="理解"></a>理解</h2><ul><li>多个上下级关系的作用域形成的链, 它的方向是从下向上的(从内到外)</li><li>查找变量时就是沿着作用域链来查找的<h2 id="查找一个变量的查找规则"><a href="#查找一个变量的查找规则" class="headerlink" title="查找一个变量的查找规则"></a>查找一个变量的查找规则</h2></li><li>在当前作用域下的执行上下文中查找对应的属性, 如果有直接返回, 否则进入2</li><li>在上一级作用域的执行上下文中查找对应的属性, 如果有直接返回, 否则进入3</li><li>再次执行2的相同操作, 直到全局作用域, 如果还找不到就抛出找不到的异常</li></ul><h1 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h1><blockquote><p>ES6之前js没有块级作用域，它使用var声明变量，以function来划分作用域，大括号“{}” 却限定不了var的作用域,用var声明的变量具有变量提升（declaration hoisting）的效果。</p></blockquote><p>  ES6新增加了一个let，可以在{}， if， for里声明。用法同var，但作用域限定在块级，let声明的变量不存在变量提升。<br>  ES6规定，如果代码块中存在let，这个区块从一开始就形成了封闭作用域,凡是在声明之前就使用，就会报错。即在代码块内，在let声明之前使用变量都是不可用的。<br>例1: 块级作用域 if</p><p>function test(flag) {<br>    if (flag) {<br>        var a = ‘js’<br>    }<br>    // 这里也可以访问 a<br>}<br>变量a在if块里声明的，但在else块和if外都可以访问到val,把var换成let后：</p><pre><code>function test(flag) {    if (flag) {        let a = &apos;js&apos;    }     // 这里也访问不到 a}</code></pre><p>例２块级作用域 for</p><pre><code>for(var i=0; i&lt;2; i++){    console.log(&apos;outer i: &apos; + i);    for(var i=0; i&lt;2; i++){    console.log(&apos;inner i: &apos;+i);    }}</code></pre><p>执行结果如下：</p><pre><code>outer i: 0test.html:12 inner i: 0test.html:12 inner i: 1</code></pre><p>可以看到，外层循环被打断了，因为ｉ为全局变量所以 i 的值被内层循环修改了，把内层循环的var换成let后：</p><pre><code>for(var i=0; i&lt;2; i++){    console.log(&apos;outer i: &apos; + i);    for(let i=0; i&lt;2; i++){    console.log(&apos;inner i: &apos;+i);    }}</code></pre><p>执行结果如下：</p><pre><code>outer i: 0test.html:12 inner i: 0test.html:12 inner i: 1test.html:10 outer i: 1test.html:12 inner i: 0test.html:12 inner i: 1</code></pre><p>示例3: 变量提升</p><p>先使用后声明</p><pre><code>console.log(a) // undefinedvar a;</code></pre><p>变量val先使用后声明，输出undefined，也不报错。把var换成let，就报错了</p><pre><code>console.log(a) // Uncaught ReferenceError: a is not definedvar a;</code></pre><p>先判断后声明</p><pre><code>if (typeof a == &apos;undefined&apos;) {    // ...}var a = &apos;&apos;</code></pre><p>把var换成let，if处报语法错 Uncaught ReferenceError: a is not defined</p><pre><code>if (typeof a == &apos;undefined&apos;) {    // ...}var a = &apos;&apos;</code></pre>]]></content>
      
      
      <categories>
          
          <category> js高级 </category>
          
          <category> 函数 </category>
          
          <category> 作用域和作用域链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 作用域 </tag>
            
            <tag> 作用域链 </tag>
            
            <tag> 块级作用域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js高级-面试题-上下文与上下文栈</title>
      <link href="/2020/06/11/js%E9%AB%98%E7%BA%A7-%E9%9D%A2%E8%AF%95%E9%A2%98-%E4%B8%8A%E4%B8%8B%E6%96%87%E4%B8%8E%E4%B8%8A%E4%B8%8B%E6%96%87%E6%A0%88/"/>
      <url>/2020/06/11/js%E9%AB%98%E7%BA%A7-%E9%9D%A2%E8%AF%95%E9%A2%98-%E4%B8%8A%E4%B8%8B%E6%96%87%E4%B8%8E%E4%B8%8A%E4%B8%8B%E6%96%87%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<h1 id="上下文栈典型面试题"><a href="#上下文栈典型面试题" class="headerlink" title="上下文栈典型面试题"></a>上下文栈典型面试题</h1><blockquote><p>凡是出现和上下文有关的面试题，第一步永远先改写代码，反映出其真正的处理过程，再进行判断</p></blockquote><h2 id="1-代码执行时控制台输出什么？整个过程产生了几个执行上下文？"><a href="#1-代码执行时控制台输出什么？整个过程产生了几个执行上下文？" class="headerlink" title="1 代码执行时控制台输出什么？整个过程产生了几个执行上下文？"></a>1 代码执行时控制台输出什么？整个过程产生了几个执行上下文？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'gb: '</span>+ i)</span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span></span><br><span class="line">foo(<span class="number">1</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (i == <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fb:'</span> + i)</span><br><span class="line">  foo(i + <span class="number">1</span>) <span class="comment">//递归调用: 在函数内部调用自己</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fe:'</span> + i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'ge: '</span> + i)</span><br></pre></td></tr></table></figure><p>先改写代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (i == <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fb:'</span> + i)</span><br><span class="line">  foo(i + <span class="number">1</span>) <span class="comment">//递归调用: 在函数内部调用自己</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fe:'</span> + i)</span><br><span class="line">&#125;</span><br><span class="line">i = <span class="number">1</span></span><br><span class="line">foo(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'ge: '</span> + i)</span><br></pre></td></tr></table></figure><p>首先来回答第一个问题：代码输出什么？<br>第一个控制台输出语句，考察的是变量提升，那么输出define<br>接下来就是函数模块很明显，这是一个简单的递归函数问题，i&lt;3时，foo函数会先输出fb，再调用自身，调用结束后，才会输出fe，<br>故针对于函数模块来说，输出如下：<br><img src="/images/js%E9%AB%98%E7%BA%A7_%E9%9D%A2%E8%AF%95_%E4%B8%8A%E4%B8%8B%E6%96%87_1_1.png" alt="函数部分结果"><br>最后一个输出语句考察的就是引用变量赋值问题，由于函数内部数据随着函数上下文的清除而清楚，最终输出的还是其外部定义的值，即：1<br>最终结果如下<br><img src="/images/js%E9%AB%98%E7%BA%A7_%E9%9D%A2%E8%AF%95_%E4%B8%8A%E4%B8%8B%E6%96%87_1_2.png" alt="函数部分结果"></p><h2 id="2-先执行变量提升，再执行函数"><a href="#2-先执行变量提升，再执行函数" class="headerlink" title="2 先执行变量提升，再执行函数"></a>2 先执行变量提升，再执行函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> a</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a) <span class="comment">// 'function'</span></span><br></pre></td></tr></table></figure><p>以上代码根据js语法，改写为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a) <span class="comment">// 'function'</span></span><br></pre></td></tr></table></figure><blockquote><p>第二句把第一句的a的数据类型给覆盖了，输出：function<br>题目简单，只是别突然忘记了就行</p></blockquote><h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!(b <span class="keyword">in</span> <span class="built_in">window</span>)) &#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(b) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>以上代码改写为：<br>    var b<br>    if (!(b in window)) {<br>    b = 1<br>    }<br>    console.log(b) // undefined</p><blockquote><p>因为if语句只做判断，并非函数模块，内部不会产生新的上下文<br>所以结果很明显，就是undefined</p></blockquote><h2 id="4"><a href="#4" class="headerlink" title="4"></a>4</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">c</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(c)</span><br><span class="line">  <span class="keyword">var</span> c = <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line">c(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>上边的代码，一开始看起来很懵，这啥啊？<br>但是，别急，先改写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">c</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> c</span><br><span class="line">  <span class="built_in">console</span>.log(c)</span><br><span class="line">  c = <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line">c = <span class="number">1</span></span><br><span class="line">c(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>改写过后，结果显而易见的，浏览器直接报错，c根本就不是一个函数嘛</p><h2 id="总结：所有涉及到上下文的面试题，第一步永远先改写代码"><a href="#总结：所有涉及到上下文的面试题，第一步永远先改写代码" class="headerlink" title="总结：所有涉及到上下文的面试题，第一步永远先改写代码"></a>总结：所有涉及到上下文的面试题，第一步永远先改写代码</h2>]]></content>
      
      
      <categories>
          
          <category> js高级 </category>
          
          <category> 面试 </category>
          
          <category> 上下文栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js面试 </tag>
            
            <tag> 上下文面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js高级-执行上下文与执行上下文栈</title>
      <link href="/2020/06/10/js%E9%AB%98%E7%BA%A7-%E5%87%BD%E6%95%B0-%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E4%B8%8E%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E6%A0%88/"/>
      <url>/2020/06/10/js%E9%AB%98%E7%BA%A7-%E5%87%BD%E6%95%B0-%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E4%B8%8E%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<h1 id="执行上下文，上下文栈"><a href="#执行上下文，上下文栈" class="headerlink" title="执行上下文，上下文栈"></a>执行上下文，上下文栈</h1><h2 id="变量，函数提升"><a href="#变量，函数提升" class="headerlink" title="变量，函数提升"></a>变量，函数提升</h2><blockquote><p>说白了就是写代码的时候先引用后声明<br>对于同名的情况 先执行变量提升，再执行函数提升</p></blockquote><p>变量声明提升</p><ul><li><p>通过var定义(声明)的变量, 在定义语句之前就可以访问到</p></li><li><p>值: undefined</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">3</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line">fn()       <span class="comment">//输出 undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">//undefined  变量提升</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">3</span></span><br></pre></td></tr></table></figure></li></ul><p>函数声明提升</p><ul><li><p>通过function声明的函数, 在之前就可以直接调用</p></li><li><p>值: 函数定义(对象)</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    fn2() <span class="comment">//可调用  函数提升</span></span><br><span class="line">    <span class="comment">// fn3() //不能  变量提升</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'fn2()'</span>)</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> fn3 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'fn3()'</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="执行上下文"><a href="#执行上下文" class="headerlink" title="执行上下文"></a>执行上下文</h2><blockquote><p>执行代码时才产生上下文</p></blockquote></li></ul><p>全局执行上下文</p><ul><li>在执行全局代码前将window确定为全局执行上下文</li><li>对全局数据进行预处理<ul><li>var定义的全局变量==&gt;undefined, 添加为window的属性</li><li>function声明的全局函数==&gt;赋值(fun), 添加为window的方法</li><li>this==&gt;赋值(window)</li></ul></li><li>开始执行全局代码<br>函数（局部）执行上下文</li><li>在调用函数, 准备执行函数体之前, 创建对应的函数执行上下文对象(虚拟的, 存在于栈中)</li><li>对局部数据进行预处理<ul><li>形参变量==&gt;赋值(实参)==&gt;添加为执行上下文的属性</li><li>arguments==&gt;赋值(实参列表), 添加为执行上下文的属性  </li><li>var定义的局部变量==&gt;undefined, 添加为执行上下文的属性 </li><li>function声明的函数 ==&gt;赋值(fun), 添加为执行上下文的方法</li><li>this==&gt;赋值(调用函数的对象)</li></ul></li><li>开始执行函数体代码</li></ul><h2 id="执行上下文栈"><a href="#执行上下文栈" class="headerlink" title="执行上下文栈"></a>执行上下文栈</h2><blockquote><p>首先看看以下代码：<br>会产生多少个上下文对象？</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bar = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">5</span></span><br><span class="line">foo(x + b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params">y</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> c = <span class="number">5</span></span><br><span class="line"><span class="built_in">console</span>.log(c + y)</span><br><span class="line">&#125;</span><br><span class="line">bar(<span class="number">10</span>)</span><br><span class="line">bar(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>3个？5个？6个？都有可能啊，别急，我们先来看看js存储上下文的机制：</p><ol><li><p>在全局代码执行前, JS引擎就会创建一个栈来存储管理所有的执行上下文对象</p></li><li><p>在全局执行上下文(window)确定后, 将其添加到栈中(压栈)</p></li><li><p>在函数执行上下文创建后, 将其添加到栈中(压栈)</p></li><li><p>在当前函数执行完后,将栈顶的对象移除(出栈)</p></li><li><p>当所有的代码执行完后, 栈中只剩下window</p><p><em>函数执行结束后，其对应的上下文对象就立刻从上下文栈中释放</em><br><img src="/images/js%E9%AB%98%E7%BA%A7-%E4%B8%8A%E4%B8%8B%E6%96%87%E6%A0%88.png" alt="上下文栈"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> js高级 </category>
          
          <category> js函数 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 执行上下文 </tag>
            
            <tag> 执行上下文栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js高级-面试题-原型_原型链</title>
      <link href="/2020/06/10/js%E9%AB%98%E7%BA%A7-%E9%9D%A2%E8%AF%95%E9%A2%98-%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
      <url>/2020/06/10/js%E9%AB%98%E7%BA%A7-%E9%9D%A2%E8%AF%95%E9%A2%98-%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="原型链典型面试题"><a href="#原型链典型面试题" class="headerlink" title="原型链典型面试题"></a>原型链典型面试题</h1><h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><blockquote><p>以下代码输出的值是多少</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"> A.prototype.n = <span class="number">1</span> </span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> b = <span class="keyword">new</span> A()</span><br><span class="line"></span><br><span class="line"> A.prototype = &#123;</span><br><span class="line">   n: <span class="number">2</span>,</span><br><span class="line">   m: <span class="number">3</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> c = <span class="keyword">new</span> A()</span><br><span class="line"> <span class="built_in">console</span>.log(b.n, b.m, c.n, c.m) <span class="comment">// 1 define 2 3</span></span><br></pre></td></tr></table></figure><p>解答：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A.prototype.n = <span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p>这一步 是在A的原型对象内部新增了一个属性 n ，其值为1<br>之后由此时的A创建的实例对象b的隐式原型指向的，也是有该属性的A的原型对象</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A.prototype = &#123;</span><br><span class="line">    n: <span class="number">2</span>,</span><br><span class="line">    m: <span class="number">3</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>这一操作，是直接在堆内存中重新开辟了一段具有n m两个属性的空间<br>同时A的实例对象地址也从新改变，指向了新开辟的地方<br>即 上述语句与下列语句等价</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A.prototype =<span class="keyword">new</span> <span class="built_in">Object</span> (&#123;</span><br><span class="line">n:<span class="number">2</span>,</span><br><span class="line">m:<span class="number">3</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>以A为构造函数新产生的实例c的 _ _ proto _ _ 的值会继承构造函数的prototype<br>故此时c继承的就是A的现有的prototype的值<br>故c可以通过原型链找到n,m两个属性</p></blockquote><h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><blockquote><p>f中有（可以使用）a，b方法吗？Foo中呢？</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span> (<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  <span class="built_in">Object</span>.prototype.a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a()'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">Function</span>.prototype.b = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'b()'</span>)oo</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> f = <span class="keyword">new</span> Foo()</span><br></pre></td></tr></table></figure><blockquote><p>首先来探讨f：<br>所有对象的prototype属性默认指向一个空的Object实例对象，此Object为该对象的原型对象（当然 Object（）除外）<br>实例对象的 _ _ proto  _ _ 指向构造函数的原型对象<br>所以， f的 _ _ proto  _ _ 指向的，也就是Foo函数的Object实例<br>而Object.prototype.a 是给Object的原型对象里面加的方法<br>所以，可以通过f来调用a方法<br>寻找过程：f=&gt;f._ _ proto  _ _ (Foo.prototype)=&gt;Foo.prototype.  _ _ proto  _ _ =&gt;Object.prototype 找到了<br>同理，f.b找到Object.prototype 也没找到<br>如下图所示：</p></blockquote><p><img src="/images/%E5%8E%9F%E5%9E%8B%E9%93%BE%E5%87%BD%E6%95%B0%E9%9D%A2%E8%AF%95%E9%A2%981.png" alt="f的原型链"></p><blockquote><p>接着来讨论Foo函数<br>首先，Foo作为一个函数，其可以理解为这样：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Foo = <span class="keyword">new</span> <span class="built_in">Function</span>()</span><br></pre></td></tr></table></figure><blockquote><p>我理解为：Function是一切函数的源头，当然Function也是其自己的源头<br>所以，Foo函数可以使用构造函数函数的原型对象内部的b方法<br>同时，由于Function也有自己的原型对象也是一个空的Object实例对象<br>所以Function.prototype.b添加的方法，Foo也可以调用<br>同时Function指向了Object实例对象，所以Foo也可以调用a方法</p></blockquote><p><img src="/images/%E5%8E%9F%E5%9E%8B%E9%93%BE%E5%87%BD%E6%95%B0%E9%9D%A2%E8%AF%95%E9%A2%982.png" alt="F的原型链"></p><blockquote><p>F.a() F没有a属性，往原型上找<br>F.<em>proto</em> = Function.prototype 没找到a<br>Function.prototype.<em>proto</em> = Object.prototype  找到了<br>同理F.b找到Function.prototype时找到了</p></blockquote><blockquote><p><a href="https://juejin.im/post/5c72a1766fb9a049ea3993e6" target="_blank" rel="noopener">还是理解不了的话，可以看一下这里的内容</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> js高级 </category>
          
          <category> 面试 </category>
          
          <category> 原型链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原型链面试 </tag>
            
            <tag> js面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js高级-原型_原型链</title>
      <link href="/2020/06/09/js%E9%AB%98%E7%BA%A7-%E5%87%BD%E6%95%B0-%E5%8E%9F%E5%9E%8B_%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
      <url>/2020/06/09/js%E9%AB%98%E7%BA%A7-%E5%87%BD%E6%95%B0-%E5%8E%9F%E5%9E%8B_%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="原型与原型链"><a href="#原型与原型链" class="headerlink" title="原型与原型链"></a>原型与原型链</h1><h2 id="原型（prototype）"><a href="#原型（prototype）" class="headerlink" title="原型（prototype）"></a>原型（prototype）</h2><ul><li>函数的prototype属性(图)    </li></ul><blockquote><p>每个函数都有一个prototype属性, 它默认指向一个Object空对象(即称为: 原型对象)<br>原型对象中有一个属性constructor, 它指向函数对象</p></blockquote><ul><li><p>给原型对象添加属性(一般都是方法)</p><blockquote><p>作用: 函数的所有实例对象自动拥有原型中的属性(方法)</p></blockquote>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 每个函数都有一个prototype属性, 它默认指向一个Object空对象(即称为: 原型对象)</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Date</span>.prototype, <span class="keyword">typeof</span> <span class="built_in">Date</span>.prototype)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fun</span> (<span class="params"></span>) </span>&#123;<span class="comment">//alt + shift +r(重命名rename)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Fun.prototype)  <span class="comment">// 默认指向一个Object空对象(没有我们的属性)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 原型对象中有一个属性constructor, 它指向函数对象</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Date</span>.prototype.constructor===<span class="built_in">Date</span>)</span><br><span class="line"><span class="built_in">console</span>.log(Fun.prototype.constructor===Fun)</span><br><span class="line"></span><br><span class="line"><span class="comment">//给原型对象添加属性(一般是方法) ===&gt;实例对象可以访问</span></span><br><span class="line">Fun.prototype.test = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'test()'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fun = <span class="keyword">new</span> Fun()</span><br><span class="line">fun.test()</span><br></pre></td></tr></table></figure></li></ul><h2 id="显示原型（属性）和隐式原型（属性）"><a href="#显示原型（属性）和隐式原型（属性）" class="headerlink" title="显示原型（属性）和隐式原型（属性）"></a>显示原型（属性）和隐式原型（属性）</h2><ol><li>每个函数function都有一个prototype，即显式原型(属性)</li><li>每个实例对象都有一个<strong>proto</strong>，可称为隐式原型(属性)</li><li>对象的隐式原型的值为其对应构造函数的显式原型的值</li><li>内存结构(图)</li><li>总结:</li></ol><ul><li><p>函数的prototype属性: 在定义函数时自动添加的, 默认值是一个空Object对象</p></li><li><p>对象的<strong>proto</strong>属性: 创建对象时自动添加的, 默认值为构造函数的prototype属性值</p></li><li><p>程序员能直接操作显式原型, 但不能直接操作隐式原型(ES6之前)</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.__proto__)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.test1 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'test1()'</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Fn.prototype)</span><br><span class="line">Fn.prototype.test2 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'test2()'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fn = <span class="keyword">new</span> Fn()</span><br><span class="line">fn.test1()</span><br><span class="line">fn.test2()</span><br><span class="line"><span class="built_in">console</span>.log(fn.toString())</span><br><span class="line"><span class="built_in">console</span>.log(fn.test3)</span><br><span class="line"><span class="comment">// fn.test3()</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. 函数的显示原型指向的对象默认是空Object实例对象(但Object不满足)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">console</span>.log(Fn.prototype <span class="keyword">instanceof</span> <span class="built_in">Object</span>) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype <span class="keyword">instanceof</span> <span class="built_in">Object</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Function</span>.prototype <span class="keyword">instanceof</span> <span class="built_in">Object</span>) <span class="comment">// true</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2. 所有函数都是Function的实例(包含Function)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Function</span>.__proto__===<span class="built_in">Function</span>.prototype)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">3. Object的原型对象是原型链尽头</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.__proto__) <span class="comment">// null</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="/images/%E6%98%BE%E5%BC%8F%E5%8E%9F%E5%9E%8B%E4%B8%8E%E9%9A%90%E5%BC%8F%E5%8E%9F%E5%9E%8B.png" alt="显式原型与隐式原型"></p><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><ul><li><p>访问一个对象的属性时:</p><ul><li><p>先在自身属性中查找，找到返回</p></li><li><p>如果没有, 再沿着<strong>proto</strong>这条链向上查找, 找到返回</p></li><li><p>如果最终没找到, 返回undefined</p></li></ul></li><li><p>别名: 隐式原型链</p></li><li><p>作用: 查找对象的属性(方法)</p></li></ul><p><img src="/images/%E5%8E%9F%E5%9E%8B%E9%93%BE%E5%88%86%E6%9E%90.png" alt="原型链分析"></p><pre><code>console.log(Object.prototype)console.log(Object.prototype.__proto__)function Fn() {this.test1 = function () {  console.log(&apos;test1()&apos;)}}console.log(Fn.prototype)Fn.prototype.test2 = function () {console.log(&apos;test2()&apos;)}var fn = new Fn()fn.test1()fn.test2()console.log(fn.toString())console.log(fn.test3)// fn.test3()</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. 函数的显示原型指向的对象默认是空Object实例对象(但Object不满足)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">console</span>.log(Fn.prototype <span class="keyword">instanceof</span> <span class="built_in">Object</span>) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype <span class="keyword">instanceof</span> <span class="built_in">Object</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Function</span>.prototype <span class="keyword">instanceof</span> <span class="built_in">Object</span>) <span class="comment">// true</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2. 所有函数都是Function的实例(包含Function)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Function</span>.__proto__===<span class="built_in">Function</span>.prototype)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">3. Object的原型对象是原型链尽头</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.__proto__) <span class="comment">// null</span></span><br></pre></td></tr></table></figure><h2 id="原型链-属性读取"><a href="#原型链-属性读取" class="headerlink" title="原型链_属性读取"></a>原型链_属性读取</h2><ol><li>读取对象的属性值时: 会自动到原型链中查找</li><li>设置对象的属性值时: 不会查找原型链, 如果当前对象中没有此属性, 直接添加此属性并设置其值</li><li>方法一般定义在原型中, 属性一般通过构造函数定义在对象本身上</li></ol><h2 id="探索instanceof"><a href="#探索instanceof" class="headerlink" title="探索instanceof"></a>探索instanceof</h2><ol><li>instanceof是如何判断的?<ul><li>表达式: A instanceof B</li><li>如果B函数的显式原型对象在A对象的原型链上, 返回true, 否则返回false</li></ul></li><li>Function是通过new自己产生的实例<blockquote><p>即：function name（）&lt;===&gt; name = new Function （）{}</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> js高级 </category>
          
          <category> js函数 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> prototype </tag>
            
            <tag> 原型 </tag>
            
            <tag> 原型链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js高级-IEFE-this</title>
      <link href="/2020/06/09/js%E9%AB%98%E7%BA%A7-%E5%9F%BA%E7%A1%80-IEFE/"/>
      <url>/2020/06/09/js%E9%AB%98%E7%BA%A7-%E5%9F%BA%E7%A1%80-IEFE/</url>
      
        <content type="html"><![CDATA[<h1 id="IEFE"><a href="#IEFE" class="headerlink" title="IEFE"></a>IEFE</h1><blockquote><p>Immediately-Invoked Function Expression（立即执行函数表达式）<br>匿名函数自调用</p></blockquote><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ul><li><p>隐藏实现</p></li><li><p>不会污染外部（全局）命名空间</p></li><li><p>用它来编码js模块</p><pre><code>(function () { //匿名函数自调用var a = 3console.log(a + 3)})()var a = 4console.log(a)// 4</code></pre></li></ul><h1 id="THIS"><a href="#THIS" class="headerlink" title="THIS"></a>THIS</h1><blockquote><p>主要研究函数中的this</p></blockquote><h2 id="this是什么"><a href="#this是什么" class="headerlink" title="this是什么"></a>this是什么</h2><ul><li>任何函数本质上都是通过某个对象来调用的,如果没有直接指定就是window</li><li>所有函数内部都有一个变量this</li><li>它的值是调用函数的当前对象</li></ul><h2 id="确定this的值"><a href="#确定this的值" class="headerlink" title="确定this的值"></a>确定this的值</h2><ul><li><p>test(): window</p></li><li><p>p.test(): p</p></li><li><p>new test(): 新创建的对象</p></li><li><p>p.call(obj): obj</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">    <span class="keyword">this</span>.color = color;</span><br><span class="line">    <span class="keyword">this</span>.getColor = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.color;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.setColor = <span class="function"><span class="keyword">function</span> (<span class="params">color</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">      <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>Person(“red”); //this是谁? window</p><p>var p = new Person(“yello”); //this是谁? p</p><p>p.getColor(); //this是谁? p</p><p>  var obj = {};<br>p.setColor.call(obj, “black”); //this是谁? obj</p><p>  var test = p.setColor;<br>test(); //this是谁? window</p><p>  function fun1() {<br>    function fun2() {<br>      console.log(this);<br>  }</p><pre><code>fun2(); //this是谁? window</code></pre><p>  }<br>  fun1();</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js高级 </category>
          
          <category> js基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IEFE </tag>
            
            <tag> this </tag>
            
            <tag> js高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js高级-函数</title>
      <link href="/2020/06/09/js%E9%AB%98%E7%BA%A7-%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0/"/>
      <url>/2020/06/09/js%E9%AB%98%E7%BA%A7-%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="函数（基础）"><a href="#函数（基础）" class="headerlink" title="函数（基础）"></a>函数（基础）</h1><h2 id="什么是函数"><a href="#什么是函数" class="headerlink" title="什么是函数"></a>什么是函数</h2><ul><li><p>实现特定功能的多条语句的封装体</p></li><li><p>只有函数可以执行 其他类型数据无法执行</p><h2 id="为什么要用函数"><a href="#为什么要用函数" class="headerlink" title="为什么要用函数"></a>为什么要用函数</h2></li><li><p>提高代码复用</p></li><li><p>便于阅读和交流</p><h2 id="如何定义"><a href="#如何定义" class="headerlink" title="如何定义"></a>如何定义</h2></li><li><p>函数声明</p><pre><code>function fn1 () { //函数声明    console.log(&apos;fn1()&apos;)}</code></pre></li><li><p>表达式</p><pre><code>var fn2 = function () { //表达式    console.log(&apos;fn2()&apos;)}</code></pre></li></ul><blockquote><p>二者有区别/</p></blockquote><h2 id="如何调用"><a href="#如何调用" class="headerlink" title="如何调用"></a>如何调用</h2><ul><li>test(): 直接调用</li><li>obj.test(): 通过对象调用</li><li>new test(): new调用</li><li>test.call/apply(obj): 临时让test成为obj的方法进行调用</li></ul><h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><ul><li><p>特殊的函数</p><ul><li>用户或者系统内部定义的</li><li>没有调用</li><li>最终函数执行了</li></ul></li><li><p>常见的回调函数</p><ul><li><p>dom事件回调函数</p><pre><code>document.getElementById(&apos;btn&apos;).onclick = function () { // dom事件回调函数alert(this.innerHTML)}</code></pre></li><li><p>定时器回调函数</p><pre><code>setTimeout(function () { // 定时器回调函数alert(&apos;到点了&apos;+this)}, 2000)</code></pre></li><li></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> js高级 </category>
          
          <category> js基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js函数 </tag>
            
            <tag> 函数调用 </tag>
            
            <tag> 回调函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js高级-对象基础</title>
      <link href="/2020/06/09/js%E9%AB%98%E7%BA%A7-%E5%9F%BA%E7%A1%80-%E5%AF%B9%E8%B1%A1/"/>
      <url>/2020/06/09/js%E9%AB%98%E7%BA%A7-%E5%9F%BA%E7%A1%80-%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><h2 id="什么是对象"><a href="#什么是对象" class="headerlink" title="什么是对象"></a>什么是对象</h2><ul><li><p>多个数据的分装体</p></li><li><p>用来保存多个数据的容器</p></li><li><p>可以类比现实中的具有多个属性的事物</p><h2 id="为什么要用对象"><a href="#为什么要用对象" class="headerlink" title="为什么要用对象"></a>为什么要用对象</h2></li><li><p>统一管理多个数据</p><h2 id="对象的组成"><a href="#对象的组成" class="headerlink" title="对象的组成"></a>对象的组成</h2></li><li><p>属性：属性名(字符串)和属性值(任意)组成</p></li><li><p>方法：一种特别的属性(属性值是函数)</p><h2 id="如何访问对象内部数据"><a href="#如何访问对象内部数据" class="headerlink" title="如何访问对象内部数据"></a>如何访问对象内部数据</h2></li><li><p>.属性名: 编码简单, 有时不能用</p></li><li><p>[‘属性’]: 编码麻烦, 能通用</p><h2 id="何时使用-属性名"><a href="#何时使用-属性名" class="headerlink" title="何时使用[属性名]"></a>何时使用[属性名]</h2></li><li><p>属性名中含有特殊字符： “ - ” ，空格等</p><pre><code>var p = {}// p.content-type = &apos;text/json&apos; //不能用p[&apos;content-type&apos;] = &apos;text/json&apos;console.log(p[&apos;content-type&apos;])//text/jsonconsole.log(p.content-type)//报错</code></pre></li><li><p>属性名为变量时</p><pre><code>var propName = &apos;myAge&apos;var value = 18// p.propName = value //不能用p[propName] = valueconsole.log(p[propName])</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> js高级 </category>
          
          <category> js基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js对象 </tag>
            
            <tag> 对象基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据-变量-内存</title>
      <link href="/2020/06/08/js%E9%AB%98%E7%BA%A7-%E5%9F%BA%E7%A1%80-%E6%95%B0%E6%8D%AE_%E5%8F%98%E9%87%8F_%E5%86%85%E5%AD%98/"/>
      <url>/2020/06/08/js%E9%AB%98%E7%BA%A7-%E5%9F%BA%E7%A1%80-%E6%95%B0%E6%8D%AE_%E5%8F%98%E9%87%8F_%E5%86%85%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<h1 id="数据变量内存"><a href="#数据变量内存" class="headerlink" title="数据变量内存"></a>数据变量内存</h1><blockquote><p> 内存,数据, 变量三者之间的关系</p><ul><li>内存用来存储数据的空间</li><li>变量是内存的标识</li></ul></blockquote><ol><li><p>什么是数据?</p><ul><li>存储在内存中代表特定信息的’东东’, 本质上是0101…</li><li>数据的特点: 可传递, 可运算</li><li>一切皆数据</li><li>内存中所有操作的目标: 数据<ul><li>算术运算 逻辑运算 赋值 运行函数</li></ul></li></ul></li><li><p>什么是内存?</p><ul><li>内存条通电后产生的可储存数据的空间(临时的)</li><li>内存产生和死亡: 内存条(电路版)==&gt;通电==&gt;产生内存空间==&gt;存储数据==&gt;处理数据==&gt;断电==&gt;内存空间和数据都消失</li><li>一块小内存的2个数据<ul><li>内部存储的数据</li><li>地址值</li></ul></li><li>内存分类<ul><li>栈: 全局变量/局部变量</li><li>堆: 对象</li></ul></li></ul></li><li><p>什么是变量?</p><ul><li>可变化的量, 由变量名和变量值组成</li><li>每个变量都对应的一块小内存, 变量名用来查找对应的内存, 变量值就是内存中保存的数据</li></ul></li><li><p>问题：</p><ol><li><p>赋值和内存</p><blockquote><p>   var a = xxx, a内存中到底保存的是什么?</p><ul><li>xxx 是基本数据, 保存的就是这个数据</li><li>xxx 是对象, 保存的是对象的地址值</li><li>xxx 是一个变量, 保存的xxx的内存内容(可能是基本数据, 也可能是地址值</li></ul></blockquote></li><li><p>引用变量赋值</p><blockquote><p>关于引用变量赋值问题</p><ul><li>2个引用变量指向同一个对象, 通过一个变量修改对象内部数据, 另一个变量看到的是修改之后的数据</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;<span class="attr">name</span>: <span class="string">'Tom'</span>&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = obj1</span><br><span class="line">obj2.age = <span class="number">12</span></span><br><span class="line"><span class="built_in">console</span>.log(obj1.age)  <span class="comment">// 12</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">obj.name = <span class="string">'A'</span></span><br><span class="line">&#125;</span><br><span class="line">fn(obj1)</span><br><span class="line"><span class="built_in">console</span>.log(obj2.name) <span class="comment">//A</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>2个引用变量指向同一个对象, 让其中一个引用变量指向另一个对象, 另一引用变量依然指向前一个对象</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;<span class="attr">age</span>: <span class="number">12</span>&#125;</span><br><span class="line"><span class="keyword">var</span> b = a</span><br><span class="line">a = &#123;<span class="attr">name</span>: <span class="string">'BOB'</span>, <span class="attr">age</span>: <span class="number">13</span>&#125;</span><br><span class="line">b.age = <span class="number">14</span></span><br><span class="line"><span class="built_in">console</span>.log(b.age, a.name, a.age) <span class="comment">// 14 Bob 13</span></span><br></pre></td></tr></table></figure></li><li><p>函数参数传递</p><blockquote><p>在js调用函数时传递变量参数时, 是值传递还是引用传递（地址值）</p><ul><li>理解1: 都是值(基本/地址值)传递</li><li>理解2: 可能是值传递, 也可能是引用传递(地址值)</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">3</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">a = a +<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">fn(a)</span><br><span class="line"><span class="built_in">console</span>.log(a)<span class="comment">//a=3</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(obj.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>: <span class="string">'Tom'</span>&#125;</span><br><span class="line">fn2(obj)</span><br></pre></td></tr></table></figure></li><li><p>通过函数修改变量值</p><blockquote><p>对于基本变量 无法修改</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">x = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">foo(a);</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 仍为1, 未受x = 2赋值所影响</span></span><br></pre></td></tr></table></figure><blockquote><p>对于引用变量<br>修改形参来修改原变量 ❌</p></blockquote><p> var obj = {x : 1};<br> function foo(o) {<br> o = 100;<br> }<br> foo(obj);<br> console.log(obj.x); // 仍然是1, obj并未被修改为100.</p><blockquote><p>修改形参的属性值来修改原变量的对应属性值</p></blockquote><p> var obj = {x : 1};<br> function foo(o) {</p><pre><code>o.x = 3;</code></pre><p> }<br> foo(obj);<br> console.log(obj.x); // 3, 被修改了!</p></li><li><p>内存管理</p><blockquote><p>   JS引擎如何管理内存?</p><ol><li>内存生命周期</li></ol><ul><li>分配小内存空间, 得到它的使用权</li><li>存储数据, 可以反复进行操作</li><li>释放小内存空间</li></ul><ol start="2"><li>释放内存</li></ol><ul><li>局部变量: 函数执行完自动释放</li><li>对象: 成为垃圾对象==&gt;垃圾回收器回收<br>垃圾对象：我理解为不被引用的对象</li></ul></blockquote></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> js高级 </category>
          
          <category> js基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 变量赋值 </tag>
            
            <tag> 函数参数传递 </tag>
            
            <tag> 内存管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据类型</title>
      <link href="/2020/06/08/js%E9%AB%98%E7%BA%A7-%E5%87%BD%E6%95%B0-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2020/06/08/js%E9%AB%98%E7%BA%A7-%E5%87%BD%E6%95%B0-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul><li>基本类型<ul><li>string：任意字符串</li><li>number：任意数字</li><li>Boolean：true/false</li><li>undefined：undefined，未赋值的var变量</li><li>null：null</li></ul></li><li>对象（引用）类型<ul><li>object：任意对象</li><li>function：特别的对象（可以执行）</li><li>array：特别的对象（数值下标，内部数据有序）</li></ul></li></ul><h2 id="类型判断"><a href="#类型判断" class="headerlink" title="类型判断"></a>类型判断</h2><ul><li><p>typeof：</p><pre><code>特殊情况记一下</code></pre><ul><li>可以判断: undefined/ 数值 / 字符串 / 布尔值 / function</li><li>不能判断: null与object  object与array</li></ul></li><li><p>instanceof：</p><ul><li>可以判断对象类型 </li></ul></li><li><p>===:</p><ul><li>可以判断undefined和null</li></ul></li></ul><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul><li>undefined 和null的区别<ul><li>undefine:代表变量定义未赋值</li><li>null：变量的一种特殊的值</li></ul></li><li>何时使用null？<ul><li>初始赋值为null，在开始对象内容不明确时，表明将来赋值为对象</li><li>结束时赋值为null，内存回收，被垃圾回收器回收</li></ul></li><li>严格区分变量类型和数据类型<ul><li>数据的类型<ul><li>基本类型</li><li>对象类型</li></ul></li><li>变量的类型(变量内存值的类型)<ul><li>基本类型: 保存就是基本类型的数据</li><li>引用类型: 保存的是地址值</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> js高级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js数据类型 </tag>
            
            <tag> typeof </tag>
            
            <tag> instanceof </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
